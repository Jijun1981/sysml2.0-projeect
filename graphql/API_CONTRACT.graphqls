# SysML v2 建模平台 API 契约
# 版本：1.0
# 这是系统对外API的完整契约定义，所有实现必须遵循此契约

# ========== 基础类型 ==========
scalar DateTime
scalar JSON

# ========== 核心模型 ==========
interface Node {
  id: ID!
}

interface Timestamped {
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface Auditable {
  createdBy: String
  updatedBy: String
}

# ========== 错误模型 ==========
type Error {
  code: String!         # REQ_CYCLE_DETECTED, CONNECTION_INVALID等
  messageKey: String!   # i18n消息键
  path: [String!]!     # 错误路径
  details: JSON        # 额外信息
}

# ========== 分页模型 ==========
type PageInfo {
  total: Int!
  page: Int!
  size: Int!
  hasNext: Boolean!
  hasPrevious: Boolean!
}

# ========== Payload模式 ==========
interface MutationPayload {
  ok: Boolean!
  error: Error
}

# ========== Element联合 ==========
union Element = 
  | RequirementDefinition 
  | RequirementUsage
  | PartDefinition
  | PartUsage
  | PortUsage
  | ConnectionUsage

# ========== 需求域 ==========
type RequirementDefinition implements Node & Timestamped & Auditable {
  id: ID!
  reqId: String!      # 业务唯一标识（服务端校验）
  name: String!
  text: String
  parent: RequirementDefinition
  children: [RequirementDefinition!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String
  updatedBy: String
}

type RequirementUsage implements Node {
  id: ID!
  definition: RequirementDefinition!
  parent: RequirementUsage
  children: [RequirementUsage!]!
}

# ========== 结构域 ==========
type PartDefinition implements Node {
  id: ID!
  name: String!
  description: String
}

type PartUsage implements Node & Timestamped {
  id: ID!
  name: String!
  definition: PartDefinition
  ports: [PortUsage!]!
  parent: PartUsage
  children: [PartUsage!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PortUsage implements Node {
  id: ID!
  name: String!
  direction: PortDirection!  # IN | OUT | INOUT
  type: PortType!           # POWER | DATA | SIGNAL
  owner: PartUsage!
}

type ConnectionUsage implements Node {
  id: ID!
  source: PortUsage!
  target: PortUsage!
  valid: Boolean!
}

enum PortDirection {
  IN
  OUT
  INOUT
}

enum PortType {
  POWER
  DATA
  SIGNAL
}

# ========== 约束域 ==========
type ConstraintResult {
  id: ID!
  constraintId: String!
  sourceId: String!         # 不建立外键
  value: Float
  unit: String
  status: ResultStatus!
  computedAt: DateTime!
  provenance: JSON
}

enum ResultStatus {
  PASS
  FAIL
  ERROR
  TIMEOUT
}

# ========== 追溯域 ==========
type TraceRelation {
  id: ID!
  type: TraceType!
  source: Element!
  target: Element!
  evidence: [Evidence!]!
  createdAt: DateTime!
}

type Evidence {
  id: ID!
  type: EvidenceType!
  status: EvidenceStatus!
  sourceId: String!
  timestamp: DateTime!
}

enum TraceType {
  SATISFIES
  VERIFIES
  ALLOCATES
}

enum EvidenceType {
  CALCULATION
  TEST
  REVIEW
  SIMULATION
}

enum EvidenceStatus {
  PASS
  FAIL
  PENDING
}

# ========== 查询 ==========
type Query {
  # 健康检查
  ok: Boolean!
  health: HealthStatus!
  
  # 需求查询
  requirement(id: ID!): RequirementDefinition
  requirements(page: Int = 1, size: Int = 20): RequirementsPage!
  
  # 结构查询
  part(id: ID!): PartUsage
  parts(page: Int = 1, size: Int = 20): PartsPage!
  
  # 追溯查询
  traces(sourceId: ID, targetId: ID): [TraceRelation!]!
  coverage(requirementIds: [ID!]!): CoverageMatrix!
}

type HealthStatus {
  status: String!
  components: JSON!
}

type RequirementsPage {
  items: [RequirementDefinition!]!
  pageInfo: PageInfo!
}

type PartsPage {
  items: [PartUsage!]!
  pageInfo: PageInfo!
}

type CoverageMatrix {
  requirements: [RequirementCoverage!]!
  overallCoverage: Float!
}

type RequirementCoverage {
  requirement: RequirementDefinition!
  satisfiedBy: [Element!]!
  verifiedBy: [Element!]!
  coverage: Float!
}

# ========== 变更 ==========
type Mutation {
  # 需求操作
  createRequirement(input: CreateRequirementInput!): CreateRequirementPayload!
  updateRequirement(id: ID!, input: UpdateRequirementInput!): UpdateRequirementPayload!
  deleteRequirement(id: ID!): DeletePayload!
  
  # 结构操作
  createPart(input: CreatePartInput!): CreatePartPayload!
  createConnection(sourcePortId: ID!, targetPortId: ID!): CreateConnectionPayload!
  
  # 追溯操作
  createTrace(type: TraceType!, sourceId: ID!, targetId: ID!): CreateTracePayload!
}

# ========== 输入类型 ==========
input CreateRequirementInput {
  reqId: String!
  name: String!
  text: String
  parentId: ID
}

input UpdateRequirementInput {
  name: String
  text: String
}

input CreatePartInput {
  name: String!
  parentId: ID
}

# ========== Payload类型 ==========
type CreateRequirementPayload implements MutationPayload {
  ok: Boolean!
  error: Error
  requirement: RequirementDefinition
}

type UpdateRequirementPayload implements MutationPayload {
  ok: Boolean!
  error: Error
  requirement: RequirementDefinition
}

type CreatePartPayload implements MutationPayload {
  ok: Boolean!
  error: Error
  part: PartUsage
}

type CreateConnectionPayload implements MutationPayload {
  ok: Boolean!
  error: Error
  connection: ConnectionUsage
}

type CreateTracePayload implements MutationPayload {
  ok: Boolean!
  error: Error
  trace: TraceRelation
}

type DeletePayload implements MutationPayload {
  ok: Boolean!
  error: Error
  deletedId: ID
}

# ========== 订阅 ==========
type Subscription {
  modelChanged: ModelChangeEvent!
}

type ModelChangeEvent {
  type: ChangeType!
  elementId: ID!
  elementType: String!
  timestamp: DateTime!
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}