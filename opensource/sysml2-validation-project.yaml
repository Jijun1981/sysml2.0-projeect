# SysML v2 API Services 汽车制动系统验证项目追踪矩阵
# 基于官方SysML-v2-API-Services的完整建模验证

project:
  name: "SysML v2 汽车制动系统验证项目"
  version: "1.0.0"
  description: "基于官方SysML-v2-API-Services创建汽车制动系统的完整M1模型验证"
  technology_stack:
    backend: "SysML-v2-API-Services (Play Framework)"
    database: "PostgreSQL"
    frontend: "Web界面 + REST API调用"
    deployment: "Docker容器化部署"
    api_version: "SysML v2 API 规范"

# Epic级别规划
epics:
  epic_1:
    id: "EPIC-001"
    name: "SysML v2 API环境搭建和部署"
    description: "搭建完整的SysML v2 API Services开发和测试环境"
    
    business_value: "为后续建模验证提供稳定的技术基础"
    acceptance_criteria:
      - "官方SysML-v2-API-Services成功部署"
      - "PostgreSQL数据库正常运行"
      - "API服务可通过REST调用访问"
      - "基础的健康检查和监控就绪"

  epic_2:
    id: "EPIC-002"
    name: "汽车制动系统需求建模"
    description: "创建完整的制动系统需求模型，包括功能、性能和约束需求"
    business_value: "验证SysML 2.0需求建模能力和需求层次结构"
    acceptance_criteria:
      - "功能需求完整定义和建模"
      - "性能需求量化指标建模"
      - "约束需求和合规性建模"
      - "需求层次关系正确建立"

  epic_3:
    id: "EPIC-003" 
    name: "制动系统结构建模"
    description: "创建制动系统的结构模型，包括部件定义和组装关系"
    business_value: "验证SysML 2.0结构建模能力和系统分解"
    acceptance_criteria:
      - "主要部件的PartDefinition完整"
      - "系统层次结构正确建模"
      - "部件间连接关系清晰"
      - "接口和端口定义完备"

  epic_4:
    id: "EPIC-004"
    name: "需求追踪和验证建模"
    description: "建立需求与设计的追踪关系，创建验证和确认模型"
    business_value: "验证SysML 2.0需求追踪和V&V建模能力"
    acceptance_criteria:
      - "需求满足关系完整建立"
      - "验证用例和测试用例定义"
      - "追踪矩阵自动生成"
      - "符合性检查机制"

  epic_5:
    id: "EPIC-005"
    name: "API集成测试和性能验证"
    description: "对整个建模过程进行API级别的集成测试和性能验证"
    business_value: "确保API服务稳定性和建模工作流程的完整性"
    acceptance_criteria:
      - "API调用链路完整测试"
      - "数据一致性验证"
      - "性能指标满足要求"
      - "错误处理机制验证"

# Stories详细规划
stories:
  # Epic 1: 环境搭建
  story_1_1:
    id: "STORY-001"
    epic_id: "EPIC-001"
    name: "部署SysML-v2-API-Services"
    description: "使用Docker部署官方SysML-v2-API-Services和PostgreSQL数据库"
    priority: "高"
    story_points: 8
    acceptance_criteria:
      - "Docker容器成功启动SysML-v2-API-Services"
      - "PostgreSQL数据库正常连接"
      - "API健康检查端点返回200状态"
      - "Swagger API文档可访问"
    technical_details:
      - api_endpoints: ["/health", "/api-docs"]
      - docker_images: ["sysml/api-services", "postgres:13"]
      - ports: ["9000:9000", "5432:5432"]

  story_1_2:
    id: "STORY-002" 
    epic_id: "EPIC-001"
    name: "配置API客户端工具"
    description: "配置Postman/curl工具集，创建API调用模板"
    priority: "中"
    story_points: 3
    acceptance_criteria:
      - "Postman集合包含所有主要API端点"
      - "环境变量正确配置"
      - "身份认证机制工作正常"
      - "API调用示例文档完整"

  # Epic 2: 需求建模
  story_2_1:
    id: "STORY-003"
    epic_id: "EPIC-002"
    name: "创建制动系统功能需求模型"
    description: "定义制动距离、响应时间、安全性等功能需求"
    priority: "高"
    story_points: 13
    acceptance_criteria:
      - "RequirementDefinition元素成功创建"
      - "功能需求层次结构完整"
      - "需求属性正确设置"
      - "需求文本描述清晰"
    sysml_elements:
      - type: "RequirementDefinition"
        name: "BrakingDistanceRequirement"
        api_endpoint: "POST /projects/{id}/commits/{id}/elements"
        properties:
          text: "车辆必须在100km/h速度下40米内完全停止"
          id: "REQ-FUNC-001"
      - type: "RequirementDefinition" 
        name: "ResponseTimeRequirement"
        properties:
          text: "制动系统响应时间不得超过150毫秒"
          id: "REQ-FUNC-002"

  story_2_2:
    id: "STORY-004"
    epic_id: "EPIC-002"  
    name: "创建制动系统性能需求模型"
    description: "定义制动力、耐久性、环境适应性等性能需求"
    priority: "高"
    story_points: 10
    acceptance_criteria:
      - "性能需求量化指标明确"
      - "需求验证条件定义"
      - "性能边界条件设置"
      - "可测量性属性配置"
    sysml_elements:
      - type: "RequirementDefinition"
        name: "BrakingForceRequirement" 
        properties:
          text: "制动力必须达到车重的0.8倍以上"
          id: "REQ-PERF-001"

  story_2_3:
    id: "STORY-005"
    epic_id: "EPIC-002"
    name: "创建制动系统约束需求模型"  
    description: "定义重量限制、成本约束、法规合规等约束需求"
    priority: "中"
    story_points: 8
    acceptance_criteria:
      - "约束条件数学表达式正确"
      - "法规标准引用完整"
      - "成本约束量化明确"
      - "约束冲突检测机制"

  # Epic 3: 结构建模
  story_3_1:
    id: "STORY-006"
    epic_id: "EPIC-003"
    name: "创建制动系统总成模型"
    description: "定义BrakingSystem主系统和基本属性"
    priority: "高" 
    story_points: 8
    acceptance_criteria:
      - "BrakingSystem PartDefinition创建"
      - "系统级属性定义完整"
      - "系统边界明确划分"
      - "系统接口定义清晰"
    sysml_elements:
      - type: "PartDefinition"
        name: "BrakingSystem"
        api_endpoint: "POST /projects/{id}/commits/{id}/elements"
        properties:
          id: "PART-SYS-001"
          description: "汽车制动系统总成"

  story_3_2:
    id: "STORY-007"
    epic_id: "EPIC-003"
    name: "创建制动系统主要部件模型"
    description: "定义制动踏板、主缸、制动盘、卡钳、ABS控制器等部件"
    priority: "高"
    story_points: 13
    acceptance_criteria:
      - "所有主要部件PartDefinition完整"
      - "部件属性和参数正确"
      - "部件接口定义完备"
      - "部件约束条件设置"
    sysml_elements:
      - type: "PartDefinition"
        name: "BrakePedal"
        properties:
          id: "PART-COMP-001"
          description: "制动踏板组件"
      - type: "PartDefinition"
        name: "MasterCylinder"
        properties:
          id: "PART-COMP-002" 
          description: "制动主缸"
      - type: "PartDefinition"
        name: "BrakeDisc"
        properties:
          id: "PART-COMP-003"
          description: "制动盘"

  story_3_3:
    id: "STORY-008"
    epic_id: "EPIC-003"
    name: "建立部件组装关系"
    description: "定义部件间的组装、连接和层次关系"
    priority: "高"
    story_points: 10
    acceptance_criteria:
      - "PartUsage关系正确建立"
      - "组装层次结构清晰"
      - "连接关系完整定义"
      - "接口绑定正确配置"

  # Epic 4: 需求追踪和验证
  story_4_1:
    id: "STORY-009"
    epic_id: "EPIC-004"
    name: "建立需求满足关系"
    description: "创建Requirements与Parts之间的satisfy关系"
    priority: "高"
    story_points: 10
    acceptance_criteria:
      - "SatisfyRequirementUsage关系创建"
      - "需求追踪链路完整"
      - "满足关系属性正确"
      - "追踪矩阵可生成"
    sysml_elements:
      - type: "SatisfyRequirementUsage"
        name: "BrakingSystemSatisfiesBrakingDistance"
        api_endpoint: "POST /projects/{id}/commits/{id}/elements"

  story_4_2:
    id: "STORY-010"
    epic_id: "EPIC-004"
    name: "创建验证用例模型"
    description: "定义需求验证的测试用例和验证方法"
    priority: "中"
    story_points: 8
    acceptance_criteria:
      - "VerificationCaseDefinition创建"
      - "验证方法详细定义"
      - "验证条件明确设置"
      - "验证结果评估标准"

  # Epic 5: 集成测试
  story_5_1:
    id: "STORY-011"
    epic_id: "EPIC-005"
    name: "API工作流程集成测试"
    description: "测试完整的建模工作流程API调用链路"
    priority: "高"
    story_points: 13
    acceptance_criteria:
      - "端到端API调用成功"
      - "数据一致性验证通过"
      - "错误处理机制验证"
      - "性能指标满足要求"

# Requirements详细定义
requirements:
  req_001:
    id: "REQ-API-001"
    story_id: "STORY-001"
    name: "SysML API服务部署"
    description: "确保SysML-v2-API-Services正确部署并可访问"
    type: "功能需求"
    priority: "高"
    acceptance_criteria:
      - "API服务在指定端口监听"
      - "数据库连接池正常工作"
      - "健康检查端点响应正常"
    test_cases:
      - test_case_id: "TC-001"
        name: "API服务健康检查"
        description: "验证API服务基础功能"
        test_method: "GET /health"
        expected_result: "HTTP 200 + JSON响应"

  req_002:
    id: "REQ-MODEL-001"
    story_id: "STORY-003"
    name: "功能需求建模"
    description: "创建完整的制动系统功能需求模型"
    type: "建模需求"
    priority: "高"
    acceptance_criteria:
      - "RequirementDefinition元素创建成功"
      - "需求属性完整配置"
      - "需求关系正确建立"
    test_cases:
      - test_case_id: "TC-002"
        name: "功能需求创建测试"
        description: "验证功能需求模型创建"
        test_method: "POST /projects/{id}/commits/{id}/elements"
        expected_result: "需求元素ID返回"

# 测试用例规范
test_specifications:
  api_testing:
    framework: "pytest + requests"
    test_data_format: "JSON"
    assertion_style: "assert + JSON Schema validation"
    
  test_case_template:
    structure:
      - test_class: "TestSysMLAPI"
      - setup_method: "创建项目和commit"
      - test_method: "执行具体API调用"
      - validation: "验证响应数据结构"
      - cleanup: "清理测试数据"

# 预期JSON数据结构示例
json_schemas:
  requirement_definition:
    type: "object"
    properties:
      "@type": "RequirementDefinition"
      "@id": "string"
      "name": "string"
      "text": "string"
      "declaredName": "string"
    required: ["@type", "@id", "name"]
    
  part_definition:
    type: "object" 
    properties:
      "@type": "PartDefinition"
      "@id": "string"
      "name": "string"
      "declaredName": "string"
    required: ["@type", "@id", "name"]

# 项目里程碑
milestones:
  milestone_1:
    name: "环境搭建完成"
    target_date: "项目开始后1周"
    deliverables: ["API服务部署", "开发环境配置"]
    
  milestone_2:
    name: "需求建模完成" 
    target_date: "项目开始后3周"
    deliverables: ["功能需求模型", "性能需求模型", "约束需求模型"]
    
  milestone_3:
    name: "结构建模完成"
    target_date: "项目开始后5周" 
    deliverables: ["系统结构模型", "部件模型", "关系模型"]
    
  milestone_4:
    name: "验证模型完成"
    target_date: "项目开始后7周"
    deliverables: ["需求追踪", "验证用例", "测试模型"]
    
  milestone_5:
    name: "项目完成"
    target_date: "项目开始后8周"
    deliverables: ["完整M1模型", "API测试报告", "技术总结"]

# 风险和缓解措施
risks:
  technical_risks:
    - risk: "API服务部署复杂性"
      probability: "中"
      impact: "高" 
      mitigation: "提前验证Docker环境，准备备用部署方案"
    - risk: "SysML 2.0规范理解偏差"
      probability: "中"
      impact: "中"
      mitigation: "深入研读官方文档，建立原型验证"
      
  project_risks:
    - risk: "建模复杂度超出预期"
      probability: "中"
      impact: "中" 
      mitigation: "采用迭代方法，先建立核心模型"

# 成功标准
success_criteria:
  technical_success:
    - "完整的汽车制动系统M1模型"
    - "需求、结构、验证三层模型完整"
    - "API调用链路100%成功"
    - "模型一致性验证通过"
    
  business_success:
    - "SysML 2.0建模能力充分验证"
    - "为后续自研提供技术参考"
    - "建模最佳实践总结"
    - "API使用经验积累"