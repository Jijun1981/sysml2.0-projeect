"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

interface MutationPayload {
  error: String
  ok: Boolean!
}

"""

Requirements domain minimal contract for P1
"""
interface Node {
  id: ID!
}

type CreateRequirementPayload implements MutationPayload {
  error: String
  ok: Boolean!
  requirement: RequirementDefinition
}

type DeletePayload implements MutationPayload {
  deletedId: ID
  error: String
  ok: Boolean!
}

type HealthStatus {
  components: JSON!
  status: String!
}

type Mutation {
  " placeholder to allow extensions from domain modules"
  _noop: Boolean
  createRequirement(input: CreateRequirementInput!): CreateRequirementPayload!
  deleteRequirement(id: ID!): DeletePayload!
  updateRequirement(id: ID!, input: UpdateRequirementInput!): UpdateRequirementPayload!
}

type Query {
  health: HealthStatus!
  ok: Boolean!
  requirement(id: ID!): RequirementDefinition
  requirements(page: Int = 1, size: Int = 20): RequirementsPage!
}

type RequirementDefinition implements Node {
  children: [RequirementDefinition!]!
  id: ID!
  name: String!
  parent: RequirementDefinition
  reqId: String!
  text: String
}

type RequirementsPage {
  items: [RequirementDefinition!]!
  page: Int!
  size: Int!
  total: Int!
}

type UpdateRequirementPayload implements MutationPayload {
  error: String
  ok: Boolean!
  requirement: RequirementDefinition
}

"A JSON scalar"
scalar JSON

input CreateRequirementInput {
  name: String!
  parentId: ID
  reqId: String!
  text: String
}

input UpdateRequirementInput {
  name: String
  text: String
}
